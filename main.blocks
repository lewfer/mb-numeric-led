<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="eRJiPRKKO/]czW^14kwk" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="8SeB`^A*kpkAX8hd`yR3" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace alphanum {" line1="    let DEFAULT_ADDRESS = 0x70;" line2="    let HT16K33_BLINK_CMD = 0x80" line3="    let HT16K33_BLINK_DISPLAYON = 0x01" line4="    let HT16K33_BLINK_OFF = 0x00" line5="    let HT16K33_BLINK_2HZ = 0x02" line6="    let HT16K33_BLINK_1HZ = 0x04" line7="    let HT16K33_BLINK_HALFHZ = 0x06" line8="    let HT16K33_SYSTEM_SETUP = 0x20" line9="    let HT16K33_OSCILLATOR = 0x01" line10="    let HT16K33_CMD_BRIGHTNESS = 0xE0" line11="" line12="    let usedi2cAddress: number = DEFAULT_ADDRESS;" line13="" line14="    let buffer = pins.createBuffer(17);" line15="" line16="    let chars: { [key: string]: number } = { ' ': 0, '!': 6, '&quot;': 544, '#': 4814, '$': 4845, '%': 3108, '&amp;': 9053, &quot;'&quot;: 1024, '(': 9216, ')': 2304, '*': 16320, '+': 4800, ',': 2048, '-': 192, '.': 0, '/': 3072, '0': 3135, '1': 6, '2': 219, '3': 143, '4': 230, '5': 8297, '6': 253, '7': 7, '8': 255, '9': 239, ':': 4608, ';': 2560, '&lt;': 9216, '=': 200, '&gt;': 2304, '?': 4227, '@': 699, 'A': 247, 'B': 4751, 'C': 57, 'D': 4623, 'E': 249, 'F': 113, 'G': 189, 'H': 246, 'I': 4608, 'J': 30, 'K': 9328, 'L': 56, 'M': 1334, 'N': 8502, 'O': 63, 'P': 243, 'Q': 8255, 'R': 8435, 'S': 237, 'T': 4609, 'U': 62, 'V': 3120, 'W': 10294, 'X': 11520, 'Y': 5376, 'Z': 3081, '[': 57, '\\': 8448, ']': 15, '^': 3075, '_': 8, '`': 256, 'a': 4184, 'b': 8312, 'c': 216, 'd': 2190, 'e': 2136, 'f': 113, 'g': 1166, 'h': 4208, 'i': 4096, 'j': 14, 'k': 13824, 'l': 48, 'm': 4308, 'n': 4176, 'o': 220, 'p': 368, 'q': 1158, 'r': 80, 's': 8328, 't': 120, 'u': 28, 'v': 8196, 'w': 10260, 'x': 10432, 'y': 8204, 'z': 2120, '{': 2377, '|': 4608, '}': 9353, '~': 1312 };" line17="" line18="" line19="    /**" line20="     * Alphanumeric LED Display" line21="     */" line22="" line23="    //% blockId=initialise_set_i2c_address" line24="    //% block = &quot;Set the i2c address&quot;" line25="    export function set_i2c_address(i2cAddress: number): void {" line26="        usedi2cAddress = i2cAddress" line27="    }" line28="" line29="    //% blockId=initialise_alphanumeric" line30="    //% block = &quot;Initialse the display&quot;" line31="    export function initialise_alphanumeric(): void {" line32="" line33="        // Init" line34="        pins.i2cWriteNumber(" line35="            usedi2cAddress," line36="            HT16K33_SYSTEM_SETUP | HT16K33_OSCILLATOR," line37="            NumberFormat.UInt8LE," line38="            false" line39="        )" line40="        // Blink rate" line41="        pins.i2cWriteNumber(" line42="            usedi2cAddress," line43="            HT16K33_BLINK_CMD | 1," line44="            NumberFormat.UInt8LE," line45="            false" line46="        )" line47="        // Brightness" line48="        pins.i2cWriteNumber(" line49="            usedi2cAddress," line50="            HT16K33_CMD_BRIGHTNESS | 0," line51="            NumberFormat.UInt8LE," line52="            false" line53="        )" line54="    }" line55="" line56="    //% blockId=alphanum_write_raw" line57="    //% block = &quot;Write raw bits at position&quot;" line58="    //% position.min = 0 position.max=3" line59="    export function write_raw(position: number, bitmask: number): void {" line60="        buffer[1 + position * 2] = bitmask &amp; 0xff" line61="        buffer[1 + position * 2 + 1] = (bitmask &gt;&gt; 8) &amp; 0xff" line62="    }" line63="" line64="    //% blockId=alphanum_update_display" line65="    //% block = &quot;Update the display&quot;" line66="    export function update_display(): void {" line67="        pins.i2cWriteBuffer(usedi2cAddress, buffer, false)" line68="    }" line69="" line70="    //% blockId=alphanum_clear_display" line71="    //% block = &quot;Clear the display&quot;" line72="    export function clear_display(): void {" line73="        for (let index = 0; index &lt;= 16; index++) {" line74="            buffer[index] = 0" line75="        }" line76="    }" line77="" line78="    //% blockId=alphanum_set_character" line79="    //% block = &quot;Set an alphanumeric character at position&quot;" line80="    //% position.min = 0 position.max=3" line81="    export function set_character(position: number, character: string): void {" line82="        write_raw(position, chars[character])" line83="    }" line84="" line85="    //% blockId=alphanum_set_string" line86="    //% block = &quot;Set an alphanumeric string on the display (4 characters)&quot;" line87="    export function set_string(character: string): void {" line88="        write_raw(0, chars[character.charAt(0)])" line89="        write_raw(1, chars[character.charAt(1)])" line90="        write_raw(2, chars[character.charAt(2)])" line91="        write_raw(3, chars[character.charAt(3)])" line92="" line93="    }" line94="}" numlines="95"></mutation></block></statement></block></xml>