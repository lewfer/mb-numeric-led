<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="L]h?u3-eOF[=#R-!;~xA" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="7$X{%l_@Wo`{ri#o)(G]" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace numeric_led {" line1="    let DEFAULT_ADDRESS = 0x70;" line2="    let HT16K33_BLINK_CMD = 0x80" line3="    let HT16K33_BLINK_DISPLAYON = 0x01" line4="    let HT16K33_BLINK_OFF = 0x00" line5="    let HT16K33_BLINK_2HZ = 0x02" line6="    let HT16K33_BLINK_1HZ = 0x04" line7="    let HT16K33_BLINK_HALFHZ = 0x06" line8="    let HT16K33_SYSTEM_SETUP = 0x20" line9="    let HT16K33_OSCILLATOR = 0x01" line10="    let HT16K33_CMD_BRIGHTNESS = 0xE0" line11="" line12="    let usedi2cAddress: number = DEFAULT_ADDRESS;" line13="" line14="    let buffer = pins.createBuffer(17);" line15="" line16="    let digits: { [key: string]: number } = { ' ': 0, '-': 64, '0': 63, '1': 6, '2': 91, '3': 79, '4': 102, '5': 109, '6': 125, '7': 7, '8': 127, '9': 111, 'A': 119, 'B': 124, 'C': 57, 'D': 94, 'E': 121, 'F': 113 };" line17="" line18="    /**" line19="     * Segment LED Display" line20="     */" line21="    //% blockId=set_display_i2c_address" line22="    //% block=&quot;set display i2c address %i2cAddress&quot;" line23="    export function set_display_i2c_address(i2cAddress: number): void {" line24="        usedi2cAddress = i2cAddress" line25="    }" line26="" line27="    //% blockId=initialise_numeric_led" line28="    //% block=&quot;initialise numeric led&quot;" line29="    export function initialise_numeric_led(): void {" line30="" line31="        // Init" line32="        pins.i2cWriteNumber(" line33="            usedi2cAddress," line34="            HT16K33_SYSTEM_SETUP | HT16K33_OSCILLATOR," line35="            NumberFormat.UInt8LE," line36="            false" line37="        )" line38="        // Blink rate" line39="        pins.i2cWriteNumber(" line40="            usedi2cAddress," line41="            HT16K33_BLINK_CMD | 1," line42="            NumberFormat.UInt8LE," line43="            false" line44="        )" line45="        // Brightness" line46="        pins.i2cWriteNumber(" line47="            usedi2cAddress," line48="            HT16K33_CMD_BRIGHTNESS | 15," line49="            NumberFormat.UInt8LE," line50="            false" line51="        )" line52="    }" line53="" line54="    /**" line55="     * Write raw bits to turn on individual segments" line56="     */" line57="    //% blockId=write_raw" line58="    //% block=&quot;write raw %bitmask at %position&quot;" line59="    //% position.min=0 position.max=3" line60="    function write_raw(bitmask: number, position: number): void {" line61="        let offset = position&lt;2?0:1" line62="        buffer[1 + (offset+position) * 2] = bitmask &amp; 0xff" line63="        buffer[1 + (offset+position) * 2 + 1] = (bitmask &gt;&gt; 8) &amp; 0xff" line64="    }" line65="" line66="    //% blockId=update_display" line67="    //% block=&quot;update display&quot;" line68="    export function update_display(): void {" line69="        pins.i2cWriteBuffer(usedi2cAddress, buffer, false)" line70="    }" line71="" line72="    //% blockId=clear_display" line73="    //% block=&quot;clear display&quot;" line74="    export function clear_display(): void {" line75="        for (let index = 0; index &lt;= 16; index++) {" line76="            buffer[index] = 0" line77="        }" line78="    }" line79="" line80="    //% blockId=display_number" line81="    //% block=&quot;display number %value&quot;" line82="    export function display_number(value: number): void {" line83="        let str = value.toString()" line84="        write_raw(digits[str.charAt(0)], 0)" line85="        write_raw(digits[str.charAt(1)], 1)" line86="        write_raw(digits[str.charAt(2)], 2)" line87="        write_raw(digits[str.charAt(3)], 3)" line88="        pins.i2cWriteBuffer(usedi2cAddress, buffer, false)" line89="    }" line90="" line91="    //% blockId=display_digit" line92="    //% block=&quot;display digit %digit at %position&quot;" line93="    //% position.min=0 position.max=3" line94="    export function display_digit(digit: number, position: number): void {" line95="        write_raw(digits[digit], position)" line96="    }" line97="}" numlines="98"></mutation></block></statement></block></xml>