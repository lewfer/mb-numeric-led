<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="o:pWDIl3wzz.qPf-+C0(" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="r?.7~@WGfSP(6yl,;!tM" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace alphanum {" line1="    let DEFAULT_ADDRESS = 0x70;" line2="    let HT16K33_BLINK_CMD = 0x80" line3="    let HT16K33_BLINK_DISPLAYON = 0x01" line4="    let HT16K33_BLINK_OFF = 0x00" line5="    let HT16K33_BLINK_2HZ = 0x02" line6="    let HT16K33_BLINK_1HZ = 0x04" line7="    let HT16K33_BLINK_HALFHZ = 0x06" line8="    let HT16K33_SYSTEM_SETUP = 0x20" line9="    let HT16K33_OSCILLATOR = 0x01" line10="    let HT16K33_CMD_BRIGHTNESS = 0xE0" line11="" line12="    let usedi2cAddress : number;" line13="" line14="    let buffer = pins.createBuffer(17);" line15="" line16="    let chars: { [key: string]: number } = { ' ': 0, '!': 6, '&quot;': 544, '#': 4814, '$': 4845, '%': 3108, '&amp;': 9053, &quot;'&quot;: 1024, '(': 9216, ')': 2304, '*': 16320, '+': 4800, ',': 2048, '-': 192, '.': 0, '/': 3072, '0': 3135, '1': 6, '2': 219, '3': 143, '4': 230, '5': 8297, '6': 253, '7': 7, '8': 255, '9': 239, ':': 4608, ';': 2560, '&lt;': 9216, '=': 200, '&gt;': 2304, '?': 4227, '@': 699, 'A': 247, 'B': 4751, 'C': 57, 'D': 4623, 'E': 249, 'F': 113, 'G': 189, 'H': 246, 'I': 4608, 'J': 30, 'K': 9328, 'L': 56, 'M': 1334, 'N': 8502, 'O': 63, 'P': 243, 'Q': 8255, 'R': 8435, 'S': 237, 'T': 4609, 'U': 62, 'V': 3120, 'W': 10294, 'X': 11520, 'Y': 5376, 'Z': 3081, '[': 57, '\\': 8448, ']': 15, '^': 3075, '_': 8, '`': 256, 'a': 4184, 'b': 8312, 'c': 216, 'd': 2190, 'e': 2136, 'f': 113, 'g': 1166, 'h': 4208, 'i': 4096, 'j': 14, 'k': 13824, 'l': 48, 'm': 4308, 'n': 4176, 'o': 220, 'p': 368, 'q': 1158, 'r': 80, 's': 8328, 't': 120, 'u': 28, 'v': 8196, 'w': 10260, 'x': 10432, 'y': 8204, 'z': 2120, '{': 2377, '|': 4608, '}': 9353, '~': 1312 };" line17="" line18="" line19="    /**" line20="     * Alphanumeric LED Display" line21="     */" line22="" line23="    //% blockId=initialise_alphanumeric" line24="    //% block = &quot;Initialse the display&quot;" line25="    export function initialise_alphanumeric(i2cAddress = DEFAULT_ADDRESS): void {" line26="        usedi2cAddress = i2cAddress" line27="" line28="        // Init" line29="        pins.i2cWriteNumber(" line30="            usedi2cAddress," line31="            HT16K33_SYSTEM_SETUP | HT16K33_OSCILLATOR," line32="            NumberFormat.UInt8LE," line33="            false" line34="        )" line35="        // Blink rate" line36="        pins.i2cWriteNumber(" line37="            usedi2cAddress," line38="            HT16K33_BLINK_CMD | 1," line39="            NumberFormat.UInt8LE," line40="            false" line41="        )" line42="        // Brightness" line43="        pins.i2cWriteNumber(" line44="            usedi2cAddress," line45="            HT16K33_CMD_BRIGHTNESS | 0," line46="            NumberFormat.UInt8LE," line47="            false" line48="        )" line49="    }" line50="" line51="    //% blockId=alphanum_write_raw" line52="    //% block = &quot;Write raw bits at position&quot;" line53="    export function write_raw(position: number, bitmask: number): void {" line54="        buffer[1 + position * 2] = bitmask &amp; 0xff" line55="        buffer[1 + position * 2 + 1] = (bitmask &gt;&gt; 8) &amp; 0xff" line56="    }" line57="" line58="    //% blockId=alphanum_update_display" line59="    //% block = &quot;Update the display&quot;" line60="    export function update_display(): void {" line61="        pins.i2cWriteBuffer(usedi2cAddress, buffer, false)" line62="    }" line63="" line64="    //% blockId=alphanum_clear_display" line65="    //% block = &quot;Clear the display&quot;" line66="    function clear_display(): void {" line67="        for (let index = 0; index &lt;= 16; index++) {" line68="            buffer[index] = 0" line69="        }" line70="    }" line71="" line72="    //% blockId=alphanum_set_character" line73="    //% block = &quot;Set an alphanumeric character at position&quot;" line74="    function set_character(position: number, character: string):void {" line75="        write_raw(position, chars[character])" line76="    }" line77="}" numlines="78"></mutation></block></statement></block></xml>